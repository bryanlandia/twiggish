package {		import flash.display.Sprite	import flash.utils.Timer;	import flash.events.TimerEvent;			internal final class Branch extends Sprite {				public var lastX:Number; // x pos of last growth on branch		public var lastY:Number; // y pos of last growth on branch		public var nodesArray:Array; // store nodes on branch		public var _branchTimer:Timer;		public var node:Node;		public function Branch(startX:Number, startY:Number) {						lastX = startX;			lastY = startY;			nodesArray = new Array();						// make an initial node			node = _addNodeToBranch(lastX, lastY);			_configureBranchTimer();			_branchTimer.start()					}				private function _configureBranchTimer(): void {			// start a Timer for adding more nodes and branches			_branchTimer = new Timer(Forest.MIN_NODE_DELAY*1000);			_branchTimer.addEventListener(TimerEvent.TIMER, _nodeCreatorTest);		}				private function _addNodeToBranch(xPos:Number, yPos:Number): Node {						node = new Node(lastX, lastY);			trace('node has '+ node.numChildren+' children');			addChild(node);			nodesArray.push(node);						// update the x and y position of the 'growing edge' of the branch			// with the ending position of the new Node's TwigSection			// new Nodes on this Branch will start there			lastX = node.section.endX;			lastY = node.section.endY;									return node;		}				private function _nodeCreatorTest(e:TimerEvent): void {			// randomly determine whether or not to create a new node at this time			if (nodesArray.length < Forest.MAX_TWIG_NODES && 			   Math.random() >= Forest.NODE_LIKELIHOOD) {				node = _addNodeToBranch(lastX, lastY); 			}		}	}	}